# FinSmart Backend Docker Compose Configuration
# For development and local testing

version: '3.8'

services:
  # Main API service
  finsmart-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: finsmart-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - /app/node_modules
    networks:
      - finsmart-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: finsmart-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finsmart-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-finsmart123}

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: finsmart-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - finsmart-api
    networks:
      - finsmart-network

networks:
  finsmart-network:
    driver: bridge

volumes:
  redis_data:
    driver: local